{
    "id": "splitButton",
    "label": "SplitButton",
    "description": "SplitButton groups a set of commands in an overlay with a default command.",
    "methods": {
        "label": "Methods",
        "shortLabel": "Methods",
        "description": "Defines methods that can be accessed by the component's reference.",
        "values": [
            {
                "name": "getElement",
                "parameters": [],
                "returnType": "HTMLDivElement",
                "description": "Used to get container element."
            },
            {
                "name": "hide",
                "parameters": [],
                "returnType": "void",
                "description": "Used to hide the popup."
            },
            {
                "name": "show",
                "parameters": [],
                "returnType": "void",
                "description": "Used to show the popup."
            }
        ]
    },
    "props": {
        "label": "SplitButtonProps",
        "shortLabel": "Props",
        "description": "Defines valid properties in SplitButton component. In addition to these, all properties of HTMLDivElement can be used in this component.",
        "values": [
            {
                "name": "appendTo",
                "optional": true,
                "readonly": false,
                "type": "null | HTMLElement | 'self' | 'body' | (() => HTMLElement | 'self' | 'body')",
                "default": "body",
                "description": "DOM element instance where the overlay panel should be mounted. Valid values are any DOM Element and 'self'. The self value is used to render a component where it is located."
            },
            {
                "name": "autoZIndex",
                "optional": true,
                "readonly": false,
                "type": "boolean",
                "default": "true",
                "description": "Whether to automatically manage layering."
            },
            {
                "name": "baseZIndex",
                "optional": true,
                "readonly": false,
                "type": "number",
                "default": "0",
                "description": "Whether to automatically manage layering."
            },
            {
                "name": "buttonClass",
                "optional": true,
                "readonly": false,
                "type": "string | null",
                "default": "null",
                "description": "ClassName of the button."
            },
            {
                "name": "buttonProps",
                "optional": true,
                "readonly": false,
                "type": "any",
                "default": "null",
                "description": "Props for the main button, any prop is passed implicity to the button element."
            },
            {
                "name": "disabled",
                "optional": true,
                "readonly": false,
                "type": "boolean",
                "default": "false",
                "description": "When present, it specifies that the component should be disabled."
            },
            {
                "name": "dropdownIcon",
                "optional": true,
                "readonly": false,
                "type": "string | IconComponent | null",
                "default": "null",
                "description": "Name of the dropdown icon or JSX.Element for dropdown icon."
            },
            {
                "name": "icon",
                "optional": true,
                "readonly": false,
                "type": "string | IconComponent | null",
                "default": "null",
                "description": "Name of the icon."
            },
            {
                "name": "label",
                "optional": true,
                "readonly": false,
                "type": "string | null",
                "default": "null",
                "description": "Text of the button."
            },
            {
                "name": "loading",
                "optional": true,
                "readonly": false,
                "type": "boolean",
                "default": "false",
                "description": "Display loading icon of the button"
            },
            {
                "name": "loadingIcon",
                "optional": true,
                "readonly": false,
                "type": "string | IconComponent | null",
                "default": "null",
                "description": "Name of the loading icon or JSX.Element for loading icon."
            },
            {
                "name": "menuButtonClass",
                "optional": true,
                "readonly": false,
                "type": "string | null",
                "default": "null",
                "description": "ClassName of the menu dropdown button."
            },
            {
                "name": "menuButtonProps",
                "optional": true,
                "readonly": false,
                "type": "any",
                "default": "null",
                "description": "Props for the dropdown button, any prop is passed implicity to the dropdown button element."
            },
            {
                "name": "menuClass",
                "optional": true,
                "readonly": false,
                "type": "string | null",
                "default": "null",
                "description": "ClassName class of the overlay menu."
            },
            {
                "name": "menuStyle",
                "optional": true,
                "readonly": false,
                "type": "string | CssObject | null",
                "default": "null",
                "description": "Inline style of the overlay menu."
            },
            {
                "name": "model",
                "optional": true,
                "readonly": false,
                "type": "MenuItem[]",
                "default": "null",
                "description": "MenuModel instance to define the overlay items."
            },
            {
                "name": "outlined",
                "optional": true,
                "readonly": false,
                "type": "boolean",
                "default": "false",
                "description": "Add a border class without a background initially."
            },
            {
                "name": "pt",
                "optional": true,
                "readonly": false,
                "type": "SplitButtonPassThroughOptions",
                "default": "null",
                "description": "Uses to pass attributes to DOM elements inside the component."
            },
            {
                "name": "ptOptions",
                "optional": true,
                "readonly": false,
                "type": "SplitButtonPassThroughMethodOptions",
                "default": "null",
                "description": "Used to configure passthrough(pt) options of the component."
            },
            {
                "name": "raised",
                "optional": true,
                "readonly": false,
                "type": "boolean",
                "default": "false",
                "description": "Add a shadow to indicate elevation."
            },
            {
                "name": "rounded",
                "optional": true,
                "readonly": false,
                "type": "boolean",
                "default": "false",
                "description": "Add a circular border radius to the button."
            },
            {
                "name": "severity",
                "optional": true,
                "readonly": false,
                "type": "ButtonSeverity | null",
                "default": "null",
                "description": "Defines the style of the button, valid values are \"secondary\", \"success\", \"info\", \"warning\", \"danger\", \"contrast\"."
            },
            {
                "name": "size",
                "optional": true,
                "readonly": false,
                "type": "${SplitButtonSize} | null",
                "default": "null",
                "description": "Defines the size of the button, valid values are \"small\" and \"large\"."
            },
            {
                "name": "text",
                "optional": true,
                "readonly": false,
                "type": "boolean",
                "default": "false",
                "description": "Add a textual class to the button without a background initially."
            },
            {
                "name": "tooltip",
                "optional": true,
                "readonly": false,
                "type": "string | null",
                "default": "null",
                "description": "Content of the tooltip."
            },
            {
                "name": "tooltipOptions",
                "optional": true,
                "readonly": false,
                "type": "TooltipOptions",
                "default": "null",
                "description": "Configuration of the tooltip, refer to the tooltip documentation for more information."
            },
            {
                "name": "transitionOptions",
                "optional": true,
                "readonly": false,
                "type": "CSSTransitionProps",
                "default": "null",
                "description": "The properties of CSSTransition can be customized, except for \"nodeRef\" and \"in\" properties."
            },
            {
                "name": "unstyled",
                "optional": true,
                "readonly": false,
                "type": "boolean",
                "default": "false",
                "description": "When enabled, it removes component related styles in the core."
            },
            {
                "name": "visible",
                "optional": true,
                "readonly": false,
                "type": "boolean",
                "default": "true",
                "description": "When present, it specifies that the element should be visible."
            }
        ]
    },
    "callbacks": {
        "label": "Callbacks",
        "shortLabel": "Callbacks",
        "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
        "values": [
            {
                "name": "onClick",
                "parameters": [
                    {
                        "name": "event",
                        "optional": false,
                        "type": "MouseEvent<HTMLElement, MouseEvent>",
                        "description": "Browser event"
                    }
                ],
                "returnType": "void",
                "description": "Callback to invoke when main button is clicked."
            },
            {
                "name": "onMenuClick",
                "parameters": [],
                "returnType": "void",
                "description": "Callback to invoke when overlay menu button is clicked."
            },
            {
                "name": "onMenuHide",
                "parameters": [],
                "returnType": "void",
                "description": "Callback to invoke when overlay menu becomes hidden."
            },
            {
                "name": "onMenuShow",
                "parameters": [],
                "returnType": "void",
                "description": "Callback to invoke when overlay menu becomes visible."
            }
        ]
    },
    "ptMethodOptions": {
        "label": "SplitButtonPassThroughMethodOptions",
        "shortLabel": "PtMethodOptions",
        "description": "Custom passthrough(pt) option method.",
        "relatedProp": "",
        "callbacks": [],
        "values": [
            {
                "name": "props",
                "optional": false,
                "readonly": false,
                "type": "SplitButtonProps"
            }
        ]
    },
    "ptContext": {
        "label": "SpliButtonContext",
        "shortLabel": "Context",
        "values": []
    },
    "ptOptions": {
        "label": "SplitButtonPassThroughOptions",
        "shortLabel": "PtOptions",
        "description": "Custom passthrough(pt) options.",
        "relatedProp": "pt",
        "callbacks": [],
        "values": [
            {
                "name": "root",
                "optional": true,
                "readonly": false,
                "type": "Div",
                "description": "Uses to pass attributes to the root's DOM element."
            },
            {
                "name": "button",
                "optional": true,
                "readonly": false,
                "type": "ButtonPassThroughOptions",
                "description": "Uses to pass attributes to the Button component."
            },
            {
                "name": "menuButton",
                "optional": true,
                "readonly": false,
                "type": "ButtonPassThroughOptions",
                "description": "Uses to pass attributes to the Button component."
            },
            {
                "name": "menu",
                "optional": true,
                "readonly": false,
                "type": "TieredMenuPassThroughOptions",
                "description": "Uses to pass attributes to the menu's DOM element."
            }
        ]
    },
    "meta": {
        "RootType": "Div",
        "omitAttributes": "'style'",
        "icon": true,
        "tooltip": false,
        "svelteComponent": false
    },
    "types": {
        "label": "Props types",
        "shortLabel": "Props types",
        "description": "Defines types used by properties of the SplitButton component.",
        "values": [{ "name": "SplitButtonSize", "value": "'small' | 'normal' | 'large'" }]
    },
    "state": {
        "label": "State",
        "description": "Defines current inline state in SplitButton component.",
        "relatedProp": "",
        "callbacks": [],
        "values": [
            {
                "name": "id",
                "optional": false,
                "readonly": false,
                "type": "string",
                "description": "Current id state as a boolean."
            },
            {
                "name": "overlayVisible",
                "optional": false,
                "readonly": false,
                "type": "boolean",
                "description": "Current overlay visible state as a boolean."
            }
        ]
    }
}

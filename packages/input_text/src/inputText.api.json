{
  "methods": {
    "description": "Defines methods that can be accessed by the component's reference.",
    "values": []
  },
  "props": {
    "description": "Defines valid properties in InputText component. In addition to these, all properties of HTMLInputElement can be used in this component.",
    "values": [
      {
        "name": "class",
        "optional": true,
        "readonly": false,
        "type": "string | null",
        "default": "null",
        "description": "CSS classes to add to root element."
      },
      {
        "name": "invalid",
        "optional": true,
        "readonly": false,
        "type": "boolean",
        "default": "false",
        "description": "When present, it specifies that the component should have invalid state style."
      },
      {
        "name": "keyfilter",
        "optional": true,
        "readonly": false,
        "type": "KeyFilterType",
        "default": "null",
        "description": "Format definition of the keys to block."
      },
      {
        "name": "pt",
        "optional": true,
        "readonly": false,
        "type": "InputTextPassThroughOptions",
        "default": "null",
        "description": "Uses to pass attributes to DOM elements inside the component."
      },
      {
        "name": "ptOptions",
        "optional": true,
        "readonly": false,
        "type": "InputTextPassThroughMethodOptions",
        "default": "null",
        "description": "Used to configure passthrough(pt) options of the component."
      },
      {
        "name": "size",
        "optional": true,
        "readonly": false,
        "type": "string | number",
        "default": "null",
        "description": "Size of the input."
      },
      {
        "name": "style",
        "optional": true,
        "readonly": false,
        "type": "string | CssObject | null",
        "default": "null",
        "description": "Style to add to root element."
      },
      {
        "name": "tooltip",
        "optional": true,
        "readonly": false,
        "type": "string | null",
        "default": "null",
        "description": "Content of the tooltip."
      },
      {
        "name": "tooltipOptions",
        "optional": true,
        "readonly": false,
        "type": "TooltipOptions",
        "default": "null",
        "description": "Configuration of the tooltip, refer to the tooltip documentation for more information."
      },
      {
        "name": "unstyled",
        "optional": true,
        "readonly": false,
        "type": "boolean",
        "default": "false",
        "description": "When enabled, it removes component related styles in the core."
      },
      {
        "name": "validateOnly",
        "optional": true,
        "readonly": false,
        "type": "boolean",
        "default": "false",
        "description": "When enabled, instead of blocking keys, input is validated internally to test against the regular expression."
      },
      {
        "name": "value",
        "optional": true,
        "readonly": false,
        "type": "null | string",
        "default": "null",
        "description": "The value of component"
      },
      {
        "name": "variant",
        "optional": true,
        "readonly": false,
        "type": "\"filled\" | \"outlined\"",
        "default": "outlined",
        "description": "Specifies the input variant of the component."
      }
    ]
  },
  "callbacks": {
    "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
    "values": [
      {
        "name": "onInput",
        "parameters": [
          {
            "name": "event",
            "optional": false,
            "type": "FormEvent<HTMLInputElement>",
            "description": "Browser event"
          },
          {
            "name": "validatePattern",
            "optional": false,
            "type": "boolean",
            "description": "Whether to validate the value"
          }
        ],
        "returnType": "void",
        "description": "Callback to invoke while typing value on input"
      }
    ]
  },
  "ptMethodOptions": {
    "description": "Custom passthrough(pt) option method.",
    "relatedProp": "",
    "callbacks": [],
    "values": [
      {
        "name": "props",
        "optional": false,
        "readonly": false,
        "type": "InputTextProps"
      },
      {
        "name": "context",
        "optional": false,
        "readonly": false,
        "type": "InputTextContext"
      }
    ]
  },
  "ptOptions": {
    "description": "Custom passthrough(pt) options.",
    "relatedProp": "pt",
    "callbacks": [],
    "values": [
      {
        "name": "root",
        "optional": true,
        "readonly": false,
        "type": "Input",
        "description": "Uses to pass attributes to the root's DOM element."
      },
      {
        "name": "tooltip",
        "optional": true,
        "readonly": false,
        "type": "TooltipPassThrough",
        "description": "Uses to pass attributes to the Tooltip component."
      }
    ]
  },
  "meta": {
    "RootType": "Input",
    "omitAttributes": "'style'",
    "icon": false,
    "tooltip": false,
    "svelteComponent": false
  },
  "types": {
    "description": "Defines types used by properties of the InputText component.",
    "values": []
  },
  "ptContext": {
    "description": "Defines current options in InputText component.",
    "relatedProp": "",
    "callbacks": [],
    "values": [
      {
        "name": "filled",
        "optional": false,
        "readonly": false,
        "type": "boolean",
        "description": "Current filled state of the component as a boolean."
      },
      {
        "name": "disabled",
        "optional": false,
        "readonly": false,
        "type": "boolean",
        "description": "Current disabled state of the component as a boolean."
      }
    ]
  }
}
{
    "description": "TieredMenu is an input component that provides real-time suggestions when being typed.",
    "methods": {
        "description": "Defines methods that can be accessed by the component's reference.",
        "values": [
            {
                "name": "getElement",
                "parameters": [],
                "returnType": "HTMLDivElement",
                "description": "Used to get container element."
            },
            {
                "name": "toggle",
                "parameters": [
                    {
                        "name": "event",
                        "type": "SyntheticEvent<Element, Event>",
                        "description": "Browser event."
                    }
                ],
                "returnType": "void",
                "description": "Toggles the visibility of the popup menu."
            }
        ]
    },
    "props": {
        "description": "Defines valid properties in TieredMenu component. In addition to these, all properties of HTMLDivElement can be used in this component.",
        "values": [
            {
                "name": "appendTo",
                "optional": true,
                "readonly": false,
                "type": "null | HTMLElement | \"self\" | Function",
                "default": "document.body",
                "description": "DOM element instance where the overlay panel should be mounted. Valid values are any DOM Element and 'self'. The self value is used to render a component where it is located."
            },
            {
                "name": "autoZIndex",
                "optional": true,
                "readonly": false,
                "type": "boolean",
                "default": "true",
                "description": "Whether to automatically manage layering."
            },
            {
                "name": "baseZIndex",
                "optional": true,
                "readonly": false,
                "type": "number",
                "default": "0",
                "description": "Whether to automatically manage layering."
            },
            {
                "name": "breakpoint",
                "optional": true,
                "readonly": false,
                "type": "string | null",
                "default": "null",
                "description": "The breakpoint to define the maximum width boundary when responsiveness is enabled."
            },
            {
                "name": "class",
                "optional": true,
                "readonly": false,
                "type": "string | null",
                "default": "null",
                "description": "CSS classes to add to root element."
            },
            {
                "name": "model",
                "optional": true,
                "readonly": false,
                "type": "MenuItem[]",
                "default": "null",
                "description": "An array of menuitems."
            },
            {
                "name": "popup",
                "optional": true,
                "readonly": false,
                "type": "boolean",
                "default": "false",
                "description": "Defines if menu would displayed as a popup."
            },
            {
                "name": "pt",
                "optional": true,
                "readonly": false,
                "type": "TieredMenuPassThroughOptions",
                "default": "null",
                "description": "Uses to pass attributes to DOM elements inside the component."
            },
            {
                "name": "ptOptions",
                "optional": true,
                "readonly": false,
                "type": "TieredMenuPassThroughMethodOptions",
                "default": "null",
                "description": "Used to configure passthrough(pt) options of the component."
            },
            {
                "name": "scrollHeight",
                "optional": true,
                "readonly": false,
                "type": "string | null",
                "default": "400px",
                "description": "Maximum height of the options panel on responsive mode."
            },
            {
                "name": "style",
                "optional": true,
                "readonly": false,
                "type": "string | CssObject | null",
                "default": "null",
                "description": "Style to add to root element."
            },
            {
                "name": "submenuIcon",
                "optional": true,
                "readonly": false,
                "type": "string | IconComponent | null",
                "default": "null",
                "description": "Icon of the submenu."
            },
            {
                "name": "transitionOptions",
                "optional": true,
                "readonly": false,
                "type": "CSSTransitionProps",
                "default": "null",
                "description": "The properties of CSSTransition can be customized, except for \"nodeRef\" and \"in\" properties."
            },
            {
                "name": "unstyled",
                "optional": true,
                "readonly": false,
                "type": "boolean",
                "default": "false",
                "description": "When enabled, it removes component related styles in the core."
            }
        ]
    },
    "callbacks": {
        "description": "Defines callbacks that determine the behavior of the component based on a given condition or report the actions that the component takes.",
        "values": [
            {
                "name": "onBlur",
                "parameters": [
                    {
                        "name": "event",
                        "optional": false,
                        "type": "SyntheticEvent<Element, Event>",
                        "description": "Browser event."
                    }
                ],
                "returnType": "void",
                "description": "Callback to invoke when menu loses focus."
            },
            {
                "name": "onFocus",
                "parameters": [
                    {
                        "name": "event",
                        "optional": false,
                        "type": "SyntheticEvent<Element, Event>",
                        "description": "Browser event."
                    }
                ],
                "returnType": "void",
                "description": "Callback to invoke when menu receives focus."
            },
            {
                "name": "onHide",
                "parameters": [
                    {
                        "name": "event",
                        "optional": false,
                        "type": "SyntheticEvent<Element, Event>",
                        "description": "Browser event."
                    }
                ],
                "returnType": "void",
                "description": "Callback to invoke when a popup menu is hidden."
            },
            {
                "name": "onShow",
                "parameters": [
                    {
                        "name": "event",
                        "optional": false,
                        "type": "SyntheticEvent<Element, Event>",
                        "description": "Browser event."
                    }
                ],
                "returnType": "void",
                "description": "Callback to invoke when a popup menu is shown."
            }
        ]
    },
    "ptMethodOptions": {
        "description": "Custom passthrough(pt) option method.",
        "relatedProp": "",
        "callbacks": [],
        "values": [
            {
                "name": "props",
                "optional": false,
                "readonly": false,
                "type": "TieredMenuProps"
            },
            {
                "name": "state",
                "optional": false,
                "readonly": false,
                "type": "TieredMenuState"
            },
            {
                "name": "context",
                "optional": false,
                "readonly": false,
                "type": "TieredMenuContext"
            }
        ]
    },
    "ptOptions": {
        "description": "Custom passthrough(pt) options.",
        "relatedProp": "pt",
        "callbacks": [],
        "values": [
            {
                "name": "root",
                "optional": true,
                "readonly": false,
                "type": "Div",
                "description": "Uses to pass attributes to the root's DOM element."
            },
            {
                "name": "menu",
                "optional": true,
                "readonly": false,
                "type": "UList",
                "description": "Uses to pass attributes to the menu's DOM element."
            },
            {
                "name": "submenu",
                "optional": true,
                "readonly": false,
                "type": "UList",
                "description": "Uses to pass attributes to the submenu's DOM element."
            },
            {
                "name": "menuitem",
                "optional": true,
                "readonly": false,
                "type": "LI",
                "description": "Uses to pass attributes to the list item's DOM element."
            },
            {
                "name": "action",
                "optional": true,
                "readonly": false,
                "type": "Anchor",
                "description": "Uses to pass attributes to the action's DOM element."
            },
            {
                "name": "icon",
                "optional": true,
                "readonly": false,
                "type": "Icon",
                "description": "Uses to pass attributes to the icon's DOM element."
            },
            {
                "name": "label",
                "optional": true,
                "readonly": false,
                "type": "Span",
                "description": "Uses to pass attributes to the label's DOM element."
            },
            {
                "name": "submenuIcon",
                "optional": true,
                "readonly": false,
                "type": "Icon",
                "description": "Uses to pass attributes to the submenu icon's DOM element."
            },
            {
                "name": "separator",
                "optional": true,
                "readonly": false,
                "type": "LI",
                "description": "Uses to pass attributes to the separator's DOM element."
            },
            {
                "name": "content",
                "optional": true,
                "readonly": false,
                "type": "Div",
                "description": "Uses to pass attributes to the content's DOM element."
            },
            {
                "name": "transition",
                "optional": true,
                "readonly": false,
                "type": "TieredMenuPassThro",
                "description": "Used to control React Transition API."
            }
        ]
    },
    "meta": {
        "RootType": "Div",
        "omitAttributes": "'style'",
        "icon": true,
        "tooltip": false,
        "svelteComponent": false
    },
    "types": {
        "description": "Defines types used by properties of the TieredMenu component.",
        "values": []
    },
    "ptContext": {
        "description": "Defines current options in TieredMenu component.",
        "relatedProp": "",
        "callbacks": [],
        "values": [
            {
                "name": "active",
                "optional": false,
                "readonly": false,
                "type": "boolean",
                "description": "Current active state of menuitem as a boolean."
            }
        ]
    },
    "state": {
        "description": "Defines current inline state in TieredMenu component.",
        "relatedProp": "",
        "callbacks": [],
        "values": [
            {
                "name": "attributeSelector",
                "optional": false,
                "readonly": false,
                "type": "string",
                "description": "Current attributeSelector visible state as a string."
            },
            {
                "name": "visible",
                "optional": false,
                "readonly": false,
                "type": "boolean",
                "description": "Current visible state as a boolean."
            }
        ]
    }
}
